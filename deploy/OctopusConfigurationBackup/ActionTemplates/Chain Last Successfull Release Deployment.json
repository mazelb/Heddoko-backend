{
  "$type": "Octopus.Core.Model.Projects.ActionTemplate, Octopus.Core",
  "Id": "ActionTemplates-1",
  "Name": "Chain Last Successfull Release Deployment",
  "Description": "Trigger a deployment for project's last successfull release in Octopus",
  "Version": 0,
  "ActionType": "Octopus.Script",
  "CommunityActionTemplateId": null,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptBody": "function OctopusDeploymentSuccessful ($taskApiPath, $octopus_server, $octopus_apikey) {\r\n    $octopus_url = \"$($octopus_server)$taskApiPath\"\r\n    $result = Invoke-RestMethod -Uri $octopus_url -ContentType application/json -Headers @{\"X-Octopus-ApiKey\"=\"$octopus_apikey\"} -Method Get\r\n    $result.State -eq \"Success\"\r\n}\r\n\r\nfunction OctopusPreviousSuccessfulReleaseId ($octopus_server, $octopus_apikey, $project, $environment) {\r\n    $octopus_url = \"$($octopus_server)/api/deployments?projects=$project&environments=$environment\"\r\n    $result = Invoke-RestMethod -Uri $octopus_url -ContentType application/json -Headers @{\"X-Octopus-ApiKey\"=\"$octopus_apikey\"} -Method Get\r\n    $item = $result.Items |\r\n        where { OctopusDeploymentSuccessful -taskApiPath $_.Links.Task -octopus_server $octopus_server -octopus_apikey $octopus_apikey} |\r\n        Select-Object -first 1\r\n    $item.ReleaseId\r\n}\r\n\r\nWrite-Host \"**********\"\r\nWrite-Host \"Chained Deployment of '$Chain_ProjectName' last successful release to '$Chain_DeployTo'.\"\r\n\r\nWrite-Host \"**********\"\r\n\r\n$baseUri = $OctopusParameters['Octopus.Web.BaseUrl']\r\n$reqheaders = @{\"X-Octopus-ApiKey\" = $Chain_ApiKey }\r\n\r\n# Find Environment\r\n$environments = Invoke-WebRequest \"$baseUri/api/environments/all\" -Headers $reqheaders -UseBasicParsing | ConvertFrom-Json\r\n$environment = $environments | Where-Object {$_.Name -eq $Chain_DeployTo }\r\nif ($environment -eq $null) {\r\n    throw \"Environment $Chain_DeployTo not found.\"\r\n}\r\n\r\n# Find Project\r\n$projects = Invoke-WebRequest \"$baseUri/api/projects/all\" -Headers $reqheaders -UseBasicParsing | ConvertFrom-Json\r\n$project = $projects | Where-Object {$_.Name -eq $Chain_ProjectName }\r\nif ($project -eq $null) {\r\n    throw \"Project $Chain_ProjectName not found.\"\r\n}\r\n\r\nWrite-Host \"Get release of the last successful deploy\"\r\n# Get release Id of the last successful deploy\r\ntry\r\n{\r\n    $releaseId = OctopusPreviousSuccessfulReleaseId -octopus_server $baseUri -octopus_apikey $Chain_ApiKey -project $project.Id -environment $environment.Id\r\n}\r\ncatch\r\n{\r\n    $result = $_.Exception.Response.GetResponseStream()\r\n    $reader = New-Object System.Io.StreamReader($result);\r\n    $responseBody = $reader.ReadToEnd();\r\n    throw \"Unable to find information of last successful release: $responseBody\"\r\n}\r\n\r\nWrite-Host \"Deploying release Id '$releaseId'\"\r\n\r\n# Check for existing release with given release id\r\n$releaseUri = \"$baseUri/api/releases/$releaseId\"\r\ntry {\r\n$release = Invoke-WebRequest $releaseUri -Headers $reqheaders -UseBasicParsing | ConvertFrom-Json\r\n} catch {\r\n    if ($_.Exception.Response.StatusCode.Value__ -ne 404) {\r\n        $result = $_.Exception.Response.GetResponseStream()\r\n        $reader = New-Object System.Io.StreamReader($result);\r\n        $responseBody = $reader.ReadToEnd();\r\n        throw \"Error occurred retrieving a Release: $responseBody\"\r\n    }\r\n}\r\n\r\n# We should have a release at this point\r\nif ($release -eq $null) {\r\n    throw \"Release '$releaseId' of '$Chain_ProjectName' not found. Could not create deployment.\"\r\n}\r\n\r\n# Get roollback step name\r\n$stepId = $OctopusParameters[\"Octopus.Step.Id\"]\r\nWrite-Host \"Step Id to skip in next deploy '$stepId'\"\r\n\r\ntry {\r\n$projectId = $project.Id\r\n$deploymentProcessUri = \"$baseUri/api/deploymentprocesses/deploymentprocess-$projectId\"\r\n$deploymentProcess = Invoke-RestMethod -Uri $deploymentProcessUri -ContentType application/json -Headers $reqheaders -Method Get\r\n\r\n$step = $deploymentProcess.Steps | Where-Object {$_.Id -eq $stepId }\r\n\r\n$actions = $step.Actions | Select-Object -ExpandProperty Id\r\n} catch {\r\n    $result = $_.Exception.Response.GetResponseStream()\r\n    $reader = New-Object System.Io.StreamReader($result);\r\n    $responseBody = $reader.ReadToEnd();\r\n    throw \"Error occurred getting actions to skip: $responseBody\"\r\n}\r\n\r\nWrite-Host \"Child actions to skip in next deploy $actions\"\r\n\r\n# Create deployment\r\n$deployment = @{\r\n    ReleaseId = $release.Id\r\n    EnvironmentId = $environment.Id\r\n    SkipActions = $actions\r\n} | ConvertTo-Json\r\ntry {\r\n    $version = $release.Version\r\n    Write-Host \"Deploying '$Chain_ProjectName' version '$version' to '$Chain_DeployTo'\"\r\n    $result = Invoke-WebRequest \"$baseUri/api/deployments\" -Method Post -Headers $reqHeaders -Body $deployment -UseBasicParsing | ConvertFrom-Json\r\n} catch {\r\n    $result = $_.Exception.Response.GetResponseStream()\r\n    $reader = New-Object System.Io.StreamReader($result);\r\n    $responseBody = $reader.ReadToEnd();\r\n    throw \"Error occurred creating a Deployment: $responseBody\"\r\n}\r\n\r\nif([bool]::Parse($Chain_WaitForDeployment)) {\r\n    Write-Host \"Waiting for deployment to complete before continuing...\"\r\n    $taskId = $result.TaskId\r\n    $task = Invoke-WebRequest \"$baseUri/api/tasks/$taskId\" -Headers $reqHeaders -UseBasicParsing | ConvertFrom-Json\r\n    while($task.State -eq \"Queued\" -or $task.State -eq \"Executing\") {\r\n        Start-Sleep -Seconds 2\r\n        $task = Invoke-WebRequest \"$baseUri/api/tasks/$taskId\" -Headers $reqHeaders -UseBasicParsing | ConvertFrom-Json\r\n    }\r\n}",
    "Octopus.Action.RunOnServer": "true"
  },
  "Parameters": [
    {
      "Id": "61bffab9-bb89-4107-a5e0-79d69eaf8f2a",
      "Name": "Chain_ApiKey",
      "Label": "API Key",
      "HelpText": "The API Key to use for authentication",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "a37cac4d-8fd3-4d58-bfda-45a436be8dd5",
      "Name": "Chain_ProjectName",
      "Label": "Project Name",
      "HelpText": "The name of the project to trigger a deployment for",
      "DefaultValue": "#{Octopus.Project.Name}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "4fd440af-70fe-41ca-bec3-074f05155e81",
      "Name": "Chain_DeployTo",
      "Label": "Deploy to Environment",
      "HelpText": "The Environment to deploy the Release to",
      "DefaultValue": "#{Octopus.Environment.Name}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "73a80735-4ca0-4c12-9fa3-f0123db6349f",
      "Name": "Chain_WaitForDeployment",
      "Label": "Wait For Deployment",
      "HelpText": "If checked, waits for the deployment to complete before continuing",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    }
  ]
}